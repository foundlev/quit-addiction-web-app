function formatTime(ms) {
    const days = Math.floor(ms / (1000 * 60 * 60 * 24));
    const hours = Math.floor((ms % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((ms % (1000 * 60)) / 1000);
    return `${days.toString().padStart(2, '0')}:${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

function calculateElapsedTime() {
    let startTime = localStorage.getItem('startTime');
    if (!startTime) {
        startTime = new Date().getTime();
        localStorage.setItem('startTime', startTime);
    }

    const now = new Date().getTime();

    let penaltyList = JSON.parse(localStorage.getItem('penaltyList')) || [];

    // Находим последний полный срыв (штраф с value === 0)
    let lastFullRelapse = penaltyList.filter(p => p.value === 0)
                                     .sort((a, b) => b.timestamp - a.timestamp)[0];

    // Определяем effectiveStartTime
    let effectiveStartTime = startTime;
    if (lastFullRelapse && lastFullRelapse.timestamp > startTime) {
        effectiveStartTime = lastFullRelapse.timestamp;
    }

    // Отфильтровываем штрафы после effectiveStartTime
    let penaltiesAfterEffectiveStart = penaltyList.filter(p => p.timestamp > effectiveStartTime);

    // Суммируем значения штрафов (value в миллисекундах)
//        let totalPenaltyTime = penaltiesAfterEffectiveStart.reduce((total, p) => {
//            return total + (p.value * 1000); // Конвертируем секунды в миллисекунды
//        }, 0);
    totalPenaltyTime = 0;

    let elapsedTime = now - effectiveStartTime - totalPenaltyTime;

    if (elapsedTime < 0) {
        elapsedTime = 0;
    }

    return elapsedTime;
}

function getPassword() {
    // Получаем пароль из localStorage
    return localStorage.getItem('quitAppPassword');
}

function savePassword(newPassword) {
    // Сохраняем новый пароль в localStorage
    localStorage.setItem('quitAppPassword', newPassword);
}

document.addEventListener('DOMContentLoaded', function() {
    // Если пароль не сохранен, то требуем ввести его.
    if (!getPassword()) {
        // Запрашиваем пароль через окно
        const passwordInput = prompt('Введите пароль для запрета выключения приложения:', '');
        if (passwordInput) {
            // Сохраняем пароль
            savePassword(passwordInput);
            // Обновляем страницу
            location.reload();
        } else {
            // Если пароль не введен, то выходим из приложения
            alert('Пароль не введен!');
            window.close();
        }
    }
});

document.addEventListener('DOMContentLoaded', function() {
    const stages = {
        "Абстиненция": `
            <bold>Научное обоснование:</bold><br><br>
            В период абстиненции организм испытывает резкое снижение уровня нейромедиаторов, таких как дофамин и серотонин. Это приводит к физиологическому дискомфорту, тревожности и раздражительности. Мозг активно реагирует на отсутствие привычных стимулов, что вызывает усиленную активность стрессовых систем и требует значительной адаптации нервной системы.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Возникает сильное желание вернуться к привычному поведению для восстановления комфортного состояния. Человек может испытывать эмоциональную нестабильность и повышенную уязвимость к стрессу. Важно применять техники саморегуляции, такие как дыхательные упражнения и медитация, а также обращаться за поддержкой к близким или специалистам.
        `,
        "Отвыкание": `
            <bold>Научное обоснование:</bold><br><br>
            Организм начинает постепенно адаптироваться к отсутствию аддиктивного стимула. Физиологические симптомы отмены уменьшаются, но нейрохимический баланс еще не восстановлен. Происходит перестройка нейронных сетей, что может вызывать колебания настроения и энергии. Мозг ищет новые способы достижения гомеостаза без участия зависимости.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Появляется осознание сложности преодоления зависимости. Человек может испытывать сомнения и колебания мотивации. Поддержка окружающих и позитивное подкрепление помогают укрепить уверенность в своих силах. Установление небольших достижимых целей способствует ощущению прогресса и повышению самооценки.
        `,
        "Адаптация": `
            <bold>Научное обоснование:</bold><br><br>
            Мозг активно восстанавливает нейрохимический баланс, усиливается нейропластичность. Улучшается функция префронтальной коры, отвечающей за принятие решений и контроль импульсов. Новые нейронные связи формируются в ответ на здоровое поведение, что способствует постепенному снижению физиологической тяги к зависимости.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Усиливается мотивация к положительным изменениям. Человек может ощущать улучшение настроения и увеличение энергии. Важно использовать этот период для внедрения новых, здоровых привычек и занятий, которые приносят удовольствие и способствуют личностному росту. Поддержка и поощрение со стороны окружающих продолжают играть важную роль.
        `,
        "Мотивация": `
            <bold>Научное обоснование:</bold><br><br>
            Увеличивается выработка эндорфинов и других нейромедиаторов, способствующих ощущению благополучия. Мозг начинает ассоциировать новые виды деятельности с положительными эмоциями, укрепляя тем самым новые нейронные пути. Это помогает уменьшить психологическую зависимость и укрепить стремление к здоровому образу жизни.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Укрепляется уверенность в собственных силах и способности преодолевать трудности. Человек может начать ставить перед собой более амбициозные цели и испытывать удовлетворение от их достижения. Поддержание мотивации важно для дальнейшего прогресса, рекомендуется вести дневник достижений или использовать другие способы самоподдержки.
        `,
        "Тяга снижается": `
            <bold>Научное обоснование:</bold><br><br>
            Физиологическая тяга к аддиктивному поведению заметно уменьшается благодаря стабилизации системы вознаграждения мозга. Активность нейронных путей, связанных с зависимостью, снижается, что приводит к уменьшению частоты навязчивых мыслей и желаний вернуться к старым привычкам.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Чувство контроля над своей жизнью усиливается. Человек может испытывать гордость за достигнутый прогресс и ощущать облегчение от снижения внутреннего напряжения. Важно продолжать избегать ситуаций, которые могут спровоцировать рецидив, и поддерживать позитивное мышление, фокусируясь на достигнутых результатах.
        `,
        "Привычки": `
            <bold>Научное обоснование:</bold><br><br>
            Формируются устойчивые нейронные связи, отвечающие за новые, здоровые привычки. Процесс нейропластичности позволяет мозгу укреплять новые модели поведения, делая их более автоматическими и менее требующими сознательных усилий. Это способствует долгосрочному поддержанию здорового образа жизни.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Новые действия становятся частью ежедневной рутины, принося удовлетворение и чувство нормальности. Человек начинает осознавать ценность и пользу новых привычек, что усиливает мотивацию продолжать их придерживаться. Регулярность и последовательность действий становятся ключевыми факторами успеха.
        `,
        "Сон": `
            <bold>Научное обоснование:</bold><br><br>
            Восстанавливается естественный цикл сна благодаря нормализации работы нейротрансмиттерных систем. Улучшается качество сна, повышается его глубина и продолжительность. Это способствует восстановлению организма, улучшению когнитивных функций и общего самочувствия.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Качественный сон положительно влияет на настроение, снижает раздражительность и повышает способность справляться со стрессом. Человек может ощущать бодрость по утрам и иметь больше энергии в течение дня. Рекомендуется поддерживать здоровый режим сна и создавать благоприятные условия для отдыха.
        `,
        "Энергия": `
            <bold>Научное обоснование:</bold><br><br>
            Повышается общий уровень энергии вследствие улучшения метаболических процессов и эффективности работы организма. Сердечно-сосудистая и дыхательная системы функционируют более эффективно, обеспечивая ткани необходимым кислородом и питательными веществами.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Появляется желание заниматься физической активностью и пробовать новые виды деятельности. Увеличение энергии способствует повышению настроения и снижению уровня стресса. Важно направлять эту энергию в позитивное русло, например, занимаясь спортом или творчеством, что укрепит новые здоровые привычки.
        `,
        "Самоконтроль": `
            <bold>Научное обоснование:</bold><br><br>
            Улучшается функция префронтальной коры головного мозга, отвечающей за самоконтроль и принятие решений. Укрепляются нейронные связи, позволяющие более эффективно контролировать импульсы и планировать долгосрочные цели, а не поддаваться мгновенным желаниям.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек ощущает большую способность сопротивляться соблазнам и принимать обдуманные решения. Увеличивается осознанность своих действий и понимание их последствий. Практики медитации, осознанности и другие техники саморегуляции могут дополнительно усилить самоконтроль и помочь в управлении эмоциями.
        `,
        "Настроение": `
            <bold>Научное обоснование:</bold><br><br>
            Стабилизируется эмоциональный фон благодаря нормализации уровня нейромедиаторов. Уменьшается реактивность на стрессовые факторы, что способствует более уравновешенному состоянию. Мозг функционирует более гармонично, обеспечивая устойчивое позитивное настроение.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Чувство удовлетворения и внутренней гармонии усиливается. Человек может заметить повышение терпимости к повседневным трудностям и улучшение взаимоотношений с окружающими. Поддержание позитивного настроя и продолжение работы над личностным ростом помогают закрепить эти положительные изменения.
        `,
        "Социализация": `
            <bold>Научное обоснование:</bold><br><br>
            Активируются области мозга, отвечающие за социальные взаимодействия и эмпатию. Улучшается функция зеркальных нейронов, что способствует лучшему пониманию и распознаванию эмоций других людей. Это ведет к укреплению социальных связей и повышению качества коммуникации.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Возникает желание укреплять существующие отношения и устанавливать новые. Человек начинает получать больше удовольствия от общения и совместных действий. Социальная поддержка становится важным ресурсом для дальнейшего развития и поддержания позитивных изменений в жизни.
        `,
        "Самоэффективность": `
            <bold>Научное обоснование:</bold><br><br>
            Укрепляется вера в собственные способности благодаря положительным изменениям в нейронных сетях, связанных с самовосприятием. Повышается активность областей мозга, ответственных за чувство награды при достижении целей, что стимулирует дальнейшие усилия и стремление к успеху.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Уверенность в себе растет, человек начинает ставить перед собой новые задачи и ощущает удовлетворение от их достижения. Это способствует повышению самооценки и укреплению позитивного образа себя. Поддержание этого состояния важно для продолжения личностного роста и развития.
        `,
        "Изменения": `
            <bold>Научное обоснование:</bold><br><br>
            Новые нейронные связи, сформированные в результате здорового поведения, становятся более устойчивыми. Мозг продолжает укреплять эти пути, что делает новые привычки и модели мышления более автоматическими. Это способствует долговременной стабилизации положительных изменений.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Изменения становятся неотъемлемой частью личности. Человек ощущает гармонию с самим собой и своим новым образом жизни. Поддержка и поощрение со стороны окружающих продолжают играть важную роль в закреплении и развитии этих изменений.
        `,
        "Уверенность": `
            <bold>Научное обоснование:</bold><br><br>
            Повышается активность нейронных сетей, связанных с уверенностью и позитивным самовосприятием. Это укрепляет способность принимать решения и брать на себя ответственность. Мозг эффективно обрабатывает информацию, связанную с успехом и достижениями, что стимулирует дальнейший рост.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек чувствует себя более компетентным и способным справляться с различными жизненными ситуациями. Возникает желание делиться опытом и поддерживать других. Это усиливает чувство социальной связи и значимости, что положительно влияет на общее эмоциональное состояние.
        `,
        "Когнитивные функции": `
            <bold>Научное обоснование:</bold><br><br>
            Улучшаются когнитивные функции, такие как память, внимание и способность к обучению. Мозг оптимизирует свои процессы обработки информации, что связано с восстановлением и укреплением нейронных связей. Повышается эффективность нейротрансмиссии, способствуя лучшему выполнению умственных задач.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек замечает повышение способности концентрироваться и усваивать новую информацию. Это открывает возможности для обучения и профессионального развития. Удовлетворение от интеллектуального роста способствует повышению самооценки и мотивации к дальнейшему совершенствованию.
        `,
        "Стресс": `
            <bold>Научное обоснование:</bold><br><br>
            Снижается уровень гормонов стресса, таких как кортизол, благодаря стабилизации работы гипоталамо-гипофизарно-адреналовой оси. Мозг и тело становятся более устойчивыми к стрессовым факторам, уменьшается реактивность на внешние раздражители, что способствует общему благополучию.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек ощущает большую спокойствие и способность справляться с повседневными трудностями. Улучшаются навыки управления эмоциями и стрессом. Практики релаксации и осознанности могут дополнительно усилить это состояние и способствовать длительному сохранению эмоционального равновесия.
        `,
        "Иммунитет": `
            <bold>Научное обоснование:</bold><br><br>
            Улучшается функция иммунной системы благодаря снижению хронического стресса и воспалительных процессов. Организм становится более устойчивым к инфекциям и заболеваниям. Нормализуется выработка иммунных клеток и антител, что укрепляет защитные механизмы организма.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек ощущает себя физически здоровее и энергичнее. Повышенное чувство благополучия способствует дальнейшему укреплению здоровых привычек. Уверенность в своем здоровье усиливает позитивное восприятие жизни и мотивирует продолжать заботиться о себе.
        `,
        "Продуктивность": `
            <bold>Научное обоснование:</bold><br><br>
            Повышается эффективность работы префронтальной коры мозга, что улучшает исполнительные функции, такие как планирование, организация и контроль над действиями. Это ведет к повышению продуктивности в различных сферах жизни, включая работу, учебу и личные проекты.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек ощущает удовлетворение от своей эффективности и способности достигать поставленных целей. Увеличивается мотивация и желание брать на себя новые задачи. Это способствует личностному росту и укреплению уверенности в своих возможностях.
        `,
        "Цели": `
            <bold>Научное обоснование:</bold><br><br>
            Активизируются области мозга, отвечающие за стратегическое мышление и долгосрочное планирование. Мозг становится более эффективным в установлении и достижении целей, а также в оценке последствий своих действий.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек начинает ясно видеть свои желания и стремления, формулирует конкретные цели на будущее. Разработка плана действий и реализация шагов по его выполнению приносят чувство удовлетворения и смысла. Это укрепляет стремление к дальнейшему развитию и самореализации.
        `,
        "Здоровые привычки": `
            <bold>Научное обоснование:</bold><br><br>
            Благодаря нейропластичности мозга, здоровые привычки становятся устойчивыми и автоматическими. Мозг укрепляет нейронные связи, связанные с положительным поведением, что способствует долгосрочному поддержанию этих привычек без значительных усилий.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Здоровый образ жизни становится естественной частью повседневности. Человек испытывает удовлетворение от новых привычек и не чувствует необходимости возвращаться к старым. Это способствует устойчивому благополучию и повышению качества жизни.
        `,
        "Концентрация": `
            <bold>Научное обоснование:</bold><br><br>
            Улучшается способность к длительной концентрации благодаря оптимизации работы нейронных сетей, отвечающих за внимание и фокусировку. Мозг становится более эффективным в фильтрации отвлекающих стимулов и поддержании сосредоточенности на задачах.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек способен эффективно работать над сложными задачами, что повышает продуктивность и удовлетворение от выполненной работы. Это открывает новые возможности для профессионального и личностного роста, усиливая мотивацию к достижению высоких результатов.
        `,
        "Эмоции": `
            <bold>Научное обоснование:</bold><br><br>
            Стабилизируется эмоциональный фон благодаря сбалансированной работе лимбической системы и префронтальной коры. Улучшается регуляция эмоций, уменьшается импульсивность и повышается способность к адаптивным эмоциональным реакциям.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек лучше понимает и контролирует свои эмоции, что положительно влияет на взаимоотношения и общее качество жизни. Развитие эмоционального интеллекта способствует более глубокому пониманию себя и окружающих, укрепляя социальные связи и личное благополучие.
        `,
        "Навыки": `
            <bold>Научное обоснование:</bold><br><br>
            Мозг готов к усвоению новых сложных навыков благодаря усиленной нейропластичности и улучшенной когнитивной функции. Нейронные сети эффективно перестраиваются в ответ на обучение, что ускоряет процесс приобретения новых знаний и умений.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Это отличное время для обучения и развития. Человек испытывает удовольствие от освоения нового и ощущает свои возможности в полной мере. Развитие навыков способствует личностному росту и расширению горизонтов, открывая новые перспективы в жизни.
        `,
        "Активность": `
            <bold>Научное обоснование:</bold><br><br>
            Повышается общая физическая и умственная активность благодаря оптимизированной работе организма и мозга. Улучшается энергия метаболических процессов, что ведет к увеличению выносливости и эффективности в повседневных делах.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек полон энергии и энтузиазма, готов браться за новые проекты и активности. Это способствует повышению удовлетворенности жизнью и укреплению чувства собственного достоинства. Активное участие в разнообразных сферах жизни обогащает опыт и приносит радость.
        `,
        "Эмоц. интеллект": `
            <bold>Научное обоснование:</bold><br><br>
            Улучшается способность понимать и управлять своими эмоциями и эмоциями других людей. Активизируются нейронные сети, отвечающие за эмпатию и социальное восприятие, что способствует более глубокому и эффективному взаимодействию с окружающими.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Отношения с окружающими улучшаются, становится легче разрешать конфликты и понимать потребности других. Развитие эмоционального интеллекта укрепляет социальные связи и способствует личностному росту. Это повышает качество жизни и удовлетворенность от взаимодействия с миром.
        `,
        "Ремиссия": `
            <bold>Научное обоснование:</bold><br><br>
            Риск рецидива значительно снижается благодаря устойчивым изменениям в нейронных сетях и стабилизации нейрохимических процессов. Мозг адаптировался к функционированию без аддиктивного стимула, укрепились новые здоровые пути вознаграждения.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек уверенно движется вперед, не испытывая тяги к возвращению старых привычек. Появляется ощущение свободы и контроля над своей жизнью. Важно продолжать поддерживать достигнутый уровень и укреплять новые привычки для долгосрочного благополучия.
        `,
        "Рост личности": `
            <bold>Научное обоснование:</bold><br><br>
            Усиливается самосознание и личностное развитие благодаря активизации областей мозга, отвечающих за рефлексию и саморегуляцию. Мозг эффективно интегрирует опыт и знания, способствуя глубокому пониманию себя и своих целей.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек осознает свой потенциал и стремится к его реализации. Появляется желание расти и развиваться, достигая новых высот. Это время самоактуализации, когда усилия направлены на достижение личных мечтаний и целей, принося глубокое удовлетворение.
        `,
        "Самоактуализация": `
            <bold>Научное обоснование:</bold><br><br>
            Достигается высокий уровень функционирования мозга, характеризующийся гармонией между различными его системами. Мозг эффективно использует свои ресурсы, обеспечивая оптимальную работу когнитивных и эмоциональных функций.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек чувствует полную гармонию с собой и миром, реализуя свой потенциал. Достигается глубокое удовлетворение жизнью и ощущение смысла. Это время наслаждаться своими достижениями и продолжать расти, помогая другим и внося вклад в общество.
        `,
        "Долгоср. ремиссия": `
            <bold>Научное обоснование:</bold><br><br>
            Изменения закрепляются на глубоком нейронном уровне, уменьшается вероятность возврата к зависимости. Мозг функционирует стабильно, поддерживая здоровые модели поведения и реакции на стрессовые ситуации.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек достиг стабильности и устойчивости в своем состоянии. Поддержание и развитие достигнутого становится естественной частью жизни. Укрепляется уверенность в себе и своих силах, что способствует дальнейшему личностному росту.
        `,
        "Восстановление": `
            <bold>Научное обоснование:</bold><br><br>
            Завершается процесс полного восстановления организма и мозга, которые функционируют в оптимальном режиме. Все системы работают слаженно, поддерживая общее здоровье и благополучие.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек полностью восстановился и готов к новым свершениям. Появляется чувство завершенности и готовности к новым этапам жизни. Это время для постановки новых целей и продолжения личностного развития, используя накопленный опыт и мудрость.
        `,
        "Трансформация": `
            <bold>Научное обоснование:</bold><br><br>
            Закрепляются долгосрочные изменения в мозге и поведении, которые стали неотъемлемой частью личности. Мозг адаптировался к новому образу жизни, и здоровые привычки поддерживаются автоматически без сознательных усилий.

            <br><br><bold>Психологический аспект:</bold><br><br>
            Человек прошел полный цикл трансформации и стал новой версией себя. Ощущается глубокое удовлетворение и понимание своей силы и возможностей. Этот опыт можно использовать для дальнейшего развития и помощи другим, вдохновляя своим примером и поддерживая окружающих.
        `
    };

    const resetButton = document.getElementById('resetButton');
    const infoButton = document.getElementById('infoButton');
    const penaltyModal = document.getElementById('penaltyModal');
    const closePenaltyModal = document.getElementById('closePenaltyModal');
    const penaltyForm = document.getElementById('penaltyForm');
    const applyPenaltyButton = document.getElementById('applyPenaltyButton');

    const medals = document.querySelectorAll('.medal'); // Выбираем все элементы с классом 'medal'
    const buttons = document.querySelectorAll('#settingsButton img, #resetButton img, #infoButton img'); // Выбираем все изображения кнопок
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)'); // Создаем объект MediaQueryList для отслеживания изменения темы

    const modal = document.getElementById('modal');
    const modalTitle = document.getElementById('modalTitle');
    const modalDescription = document.getElementById('modalDescription');
    const closeModal = document.getElementById('closeModal');
    const timerElement = document.getElementById('timer');

    const now = new Date();
    const day = now.getDate(); // Получаем текущий день
    const month = now.getMonth() + 1; // Получаем текущий месяц (нумерация месяцев начинается с 0)

    const quoteIndex = (day + month) % 208; // Получаем индекс цитаты

//    fetch('quotes.json')
//        .then(response => response.json())
//        .then(quotes => {
//            const quoteContainer = document.getElementById('quoteContainer');
//            quoteContainer.textContent = quotes[quoteIndex];
//        })
//        .catch(error => console.error('Ошибка загрузки цитат: ', error));

    const settingsButton = document.getElementById('settingsButton');
    let intervalId; // Хранение ID интервала для возможности его остановки

    settingsButton.addEventListener('click', function() {
        const inputTimestamp = prompt("Введите новый timestamp (в миллисекундах):");
        if (inputTimestamp) {
            const newTime = parseInt(inputTimestamp, 10);
            if (!isNaN(newTime)) {
                localStorage.setItem('startTime', newTime);
                clearInterval(intervalId);
                updateTimer();
            } else {
                alert("Введено некорректное значение. Пожалуйста, введите число.");
            }
        }
    });

    function updateTimer() {
        if (intervalId) {
            clearInterval(intervalId);
        }
        intervalId = setInterval(() => {
            const elapsedTime = calculateElapsedTime();

            const totalDuration = 90 * 24 * 60 * 60 * 1000; // 90 дней в миллисекундах
            const elapsedPercentage = (elapsedTime / totalDuration * 100).toFixed(2);
            const progressBar = document.getElementById('progress-bar');
            const timerElement = document.getElementById('timer');

            // Вычисляем количество дней
            const days = elapsedTime / (1000 * 60 * 60 * 24);

            let message = '';
            if (days < 3) {
                message = 'Абстиненция';
            } else if (days < 6) {
                message = 'Отвыкание';
            } else if (days < 9) {
                message = 'Адаптация';
            } else if (days < 12) {
                message = 'Мотивация';
            } else if (days < 15) {
                message = 'Тяга снижается';
            } else if (days < 18) {
                message = 'Привычки';
            } else if (days < 21) {
                message = 'Сон';
            } else if (days < 24) {
                message = 'Энергия';
            } else if (days < 27) {
                message = 'Самоконтроль';
            } else if (days < 30) {
                message = 'Настроение';
            } else if (days < 33) {
                message = 'Социализация';
            } else if (days < 36) {
                message = 'Самоэффективность';
            } else if (days < 39) {
                message = 'Изменения';
            } else if (days < 42) {
                message = 'Уверенность';
            } else if (days < 45) {
                message = 'Когнитивные функции';
            } else if (days < 48) {
                message = 'Стресс';
            } else if (days < 51) {
                message = 'Иммунитет';
            } else if (days < 54) {
                message = 'Продуктивность';
            } else if (days < 57) {
                message = 'Цели';
            } else if (days < 60) {
                message = 'Здоровые привычки';
            } else if (days < 63) {
                message = 'Концентрация';
            } else if (days < 66) {
                message = 'Эмоции';
            } else if (days < 69) {
                message = 'Навыки';
            } else if (days < 72) {
                message = 'Активность';
            } else if (days < 75) {
                message = 'Эмоц. интеллект';
            } else if (days < 78) {
                message = 'Ремиссия';
            } else if (days < 81) {
                message = 'Рост личности';
            } else if (days < 84) {
                message = 'Самоактуализация';
            } else if (days < 87) {
                message = 'Долгоср. ремиссия';
            } else if (days < 90) {
                message = 'Восстановление';
            } else {
                message = 'Трансформация';
            }

            timerElement.innerHTML = `${formatTime(elapsedTime)}<br>${message}`;
            progressBar.style.width = `${elapsedPercentage}%`;

        }, 1000);
    }

    // Запуск таймера при загрузке страницы
    let startTime = localStorage.getItem('startTime');
    if (!startTime) {
        startTime = new Date().getTime();
        localStorage.setItem('startTime', startTime);
    }
    updateTimer();

    // Переключение изображений медалей и кнопок в зависимости от текущей темы
    function updateImages(e) {
        // Функция для обновления изображений
        medals.forEach(medal => {
            // Для каждого элемента 'medal'
            medal.src = e.matches ? medal.getAttribute('data-dark') : medal.getAttribute('data-light');
            // Устанавливаем атрибут 'src' в зависимости от текущей темы: 'data-dark' для темной темы и 'data-light' для светлой
        });
        buttons.forEach(button => {
            // Для каждого изображения кнопок
            button.src = e.matches ? button.getAttribute('data-dark') : button.getAttribute('data-light');
            // Устанавливаем атрибут 'src' в зависимости от текущей темы: 'data-dark' для темной темы и 'data-light' для светлой
        });
    }

    function calculateAnxiety(t) {
        const days = t / 86400;
        const phase1 = 40 / (1 + Math.exp(0.5 * (days - 7)));
        const phase2 = 50 / (1 + Math.exp(-0.5 * (days - 18))) + 20;
        const phase3 = 73 / (1 + Math.exp(0.2 * (days - 45)));
        const phase4 = 4 / (1 + Math.exp(0.2 * (days - 75)));

        let anxiety;
        if (days < 7) {
            anxiety = phase1;
        } else if (days < 30) {
            anxiety = phase2;
        } else if (days < 60) {
            anxiety = phase3;
        } else {
            anxiety = phase4;
        }
        return Math.max(0, Math.min(100, anxiety));
    }

    function calculateSociality(t) {
        const days = t / 86400;
        const phase1 = 30 - 3 * days;
        const phase2 = 55 / (1 + Math.exp(0.5 * (days - 2)));
        const phase3 = 51 / (1 + Math.exp(-0.25 * (days - 18))) - 1;
        const phase4 = 40 / (1 + Math.exp(-0.1 * (days - 45))) + 40;
        const phase5 = 60 / (0.65 + Math.exp(-0.06 * (days - 45))) + 16;

        let sociality;
        if (days < 3) {
            sociality = phase1;
        } else if (days < 7) {
            sociality = phase2;
        } else if (days < 30) {
            sociality = phase3;
        } else if (days < 60) {
            sociality = phase4;
        } else {
            sociality = phase5;
        }
        return Math.max(0, Math.min(100, sociality));
    }

    function calculateSleepQuality(t) {
        const days = t / 86400;
        const phase1 = 40 - 20 / (1 + Math.exp(-1 * (days - 3)));
        const phase2 = 20 + 40 / (1 + Math.exp(-0.2 * (days - 18)));
        const phase3 = 50 + 50 / (1 + Math.exp(-0.1 * (days - 45)));
        const phase4 = 90 + 14 / (1 + Math.exp(-0.1 * (days - 75)));

        let moodQuality;
        if (days < 3) {
            moodQuality = phase1;
        } else if (days < 30) {
            moodQuality = phase2;
        } else if (days < 60) {
            moodQuality = phase3;
        } else {
            moodQuality = phase4;
        }
        return Math.max(0, Math.min(100, moodQuality));
    }

    function calculateImpulsivity(t) {
        const days = t / 86400;
        const phase1 = 80 / (1 + Math.exp(-0.3 * (days - 3)));
        const phase2 = 80 - 40 / (1 + Math.exp(-0.2 * (days - 18)));
        const phase3 = 49 - 30 / (1 + Math.exp(-0.1 * (days - 45)));
        const phase4 = 36 - 50 / (1 + Math.exp(-0.08 * (days - 75)));

        let impulsivity;
        if (days < 7) {
            impulsivity = phase1;
        } else if (days < 30) {
            impulsivity = phase2;
        } else if (days < 60) {
            impulsivity = phase3;
        } else {
            impulsivity = phase4;
        }
        return Math.max(0, Math.min(100, impulsivity));
    }

    function calculateEnergy(t) {
        const days = t / 86400;
        const phase1 = 50 - 15 * days;
        const phase2 = 35 - 15 / (1 + Math.exp(-1 * (days - 5)));
        const phase3 = 20 + 30 / (1 + Math.exp(-0.3 * (days - 11)));
        const phase4 = 50 + 25 / (1 + Math.exp(-0.2 * (days - 18)));
        const phase5 = 75 + 15 / (1 + Math.exp(-0.1 * (days - 25)));
        const phase6 = 90 - 5 / (1 + Math.exp(-0.05 * (days - 38)));
        const phase7 = 85 + 10 / (1 + Math.exp(-0.03 * (days - 53)));
        const phase8 = 95 - 5 / (1 + Math.exp(-0.02 * (days - 68)));
        const phase9 = 90 + 10 / (1 + Math.exp(-0.01 * (days - 83)));

        let energy;
        if (days < 3) {
            energy = phase1;
        } else if (days < 8) {
            energy = phase2;
        } else if (days < 15) {
            energy = phase3;
        } else if (days < 22) {
            energy = phase4;
        } else if (days < 31) {
            energy = phase5;
        } else if (days < 46) {
            energy = phase6;
        } else if (days < 61) {
            energy = phase7;
        } else if (days < 76) {
            energy = phase8;
        } else {
            energy = phase9;
        }
        return Math.max(0, Math.min(100, energy));
    }
    // Функция для обновления цвета параметров
    function getColor(value, isPositive) {
        if (isPositive) {
            const red = Math.min(255, Math.floor(255 - 2.55 * value));
            const green = Math.min(255, Math.floor(100 + 1.55 * value));
            return `rgb(${red}, ${green}, 0)`;
        } else {
            const red = Math.min(255, Math.floor(100 + 1.55 * value));
            const green = Math.min(255, Math.floor(255 - 2.55 * value));
            return `rgb(${red}, ${green}, 0)`;
        }
    }

    const updateTheme = (e) => {
        if (e.matches) {
            document.querySelector('meta[name="theme-color"]').setAttribute('content', '#1e1e1e');
        } else {
            document.querySelector('meta[name="theme-color"]').setAttribute('content', '#ffffff');
        }
    };

    mediaQuery.addListener(updateImages); // Добавляем слушатель изменений темы
    mediaQuery.addListener(updateTheme);
    updateImages(mediaQuery); // Вызываем функцию для первоначальной установки изображений в зависимости от текущей темы
    updateTheme(mediaQuery);

    // Обработчик события для кнопки "infoButton"
    infoButton.addEventListener('click', function() {
        // Получаем название текущей стадии из элемента с id="timer"
        const currentStage = timerElement.innerHTML.split('<br>')[1].trim();

        // Получаем описание для текущей стадии из словаря "stages"
        const description = stages[currentStage] || 'Описание недоступно.';

        // Устанавливаем заголовок и описание в модальном окне
        modalTitle.textContent = currentStage;
        modalDescription.innerHTML = description;

        // Отображаем модальное окно
        modal.classList.remove('hidden');
    });

    // Обработчик события для закрытия модального окна
    closeModal.addEventListener('click', function() {
        // Скрываем модальное окно
        modal.classList.add('hidden');
    });

    // Дополнительно: закрытие модального окна при клике вне его области
    window.addEventListener('click', function(event) {
        if (event.target === modal) {
            modal.classList.add('hidden');
        }
    });

    const penalties = [
        {
            name: "Полный срыв",
            value: 0,
            rate: "🟥"
        },
        {
            name: "Просмотр видеоконтента",
            value: 24 * 3600, // 36 часов
            rate: "🟥"
        },
        {
            name: "Просмотр фотоконтента",
            value: 18 * 3600, // 24 часа
            rate: "🟥"
        },
        {
            name: "Особенные твич стримы",
            value: 16 * 3600, // 18 часов
            rate: "🟥"
        },
        {
            name: "Ерзание на животе",
            value: 12 * 3600, // 12 часов
            rate: "🟥"
        },
        {
            name: "Лежание на животе",
            value: 10 * 3600, // 10 часов
            rate: "🟧"
        },
        {
            name: "Долгие фантазии",
            value: 8 * 3600, // 8 часов
            rate: "🟧"
        },
        {
            name: "Игнорирование триггеров",
            value: 7 * 3600, // 7 часов
            rate: "🟧"
        },
        {
            name: "Прикосновения",
            value: 6 * 3600, // 6 часов
            rate: "🟧"
        },
        {
            name: "Смартфон не вовремя",
            value: 5 * 3600, // 5 часов
            rate: "🟨"
        }
    ];

    // Показ модального окна при нажатии на resetButton
    resetButton.addEventListener('click', function(event) {
        // Генерируем опции штрафов динамически
        penaltyForm.innerHTML = ''; // Очищаем предыдущие опции
        penalties.forEach((penalty, index) => {
            const optionDiv = document.createElement('div');
            optionDiv.className = 'penalty-option';
            optionDiv.dataset.index = index; // Сохраняем индекс штрафа
            optionDiv.dataset.value = penalty.value; // Сохраняем значение штрафа
            optionDiv.dataset.rate = penalty.rate

            optionDiv.innerHTML = `
                <span>${penalty.name}</span>
                <span>${penalty.rate}</span>
            `;

            // Добавляем обработчик клика для выделения
            optionDiv.addEventListener('click', function() {
                optionDiv.classList.toggle('selected');
            });

            penaltyForm.appendChild(optionDiv);
        });

        // Показ модального окна
        penaltyModal.classList.remove('hidden');
    });

    applyPenaltyButton.addEventListener('click', function() {
        // Получаем все выбранные штрафы
        const selectedPenalties = [];
        const selectedOptions = penaltyForm.querySelectorAll('.penalty-option.selected');
        selectedOptions.forEach(optionDiv => {
            const index = optionDiv.dataset.index;
            selectedPenalties.push(penalties[index]);
        });

        if (selectedPenalties.length > 0) {
            const nowTime = new Date().getTime();
            const penaltiesToSaveList = [];

            selectedPenalties.forEach(currentPenalty => {
                const penaltyRecord = {
                    name: currentPenalty.name,
                    timestamp: nowTime,
                    value: currentPenalty.value // в секундах
                };
                penaltiesToSaveList.push(penaltyRecord);
            });

            // Получаем существующий список штрафов из localStorage
            const penaltyLoadedList = JSON.parse(localStorage.getItem('penaltyList')) || [];
            // Расширяем список penaltyList списком penaltiesToSaveList.
            const newPenaltiesList = penaltyLoadedList.concat(penaltiesToSaveList);

            localStorage.setItem('penaltyList', JSON.stringify(newPenaltiesList));

            // Скрываем модальное окно и обновляем страницу
            penaltyModal.classList.add('hidden');
            penaltyForm.innerHTML = ''; // Сбрасываем содержимое формы
            location.reload();
        } else {
            // Если ничего не выбрано, показываем сообщение
            alert('Пожалуйста, выберите хотя бы один штраф.');
        }
    });

    // Закрытие модального окна без применения штрафов
    closePenaltyModal.addEventListener('click', function() {
        penaltyModal.classList.add('hidden');
        // Сброс выделений
        penaltyForm.reset();
    });

});

function canSaveSliders() {
    let records = JSON.parse(localStorage.getItem('records')) || [];

    // Если records пустой, то возвращаем true
    if (records.length === 0) {
        return true;
    }

    // Получаем значение последнего сохранения lastSaveTime из localStorage
    const lastSaveTime = parseInt(localStorage.getItem('lastSaveTime')) || 0;
    // Получаем текущий timestamp в секундах
    const timestamp = Math.floor(Date.now() / 1000);

    // Если прошло меньше 1 часа с lastSaveTime, то False, иначе продолжаем дальше.
    console.log(timestamp - lastSaveTime);
    if (timestamp - lastSaveTime < 1 * 3600) {
        return false;
    }

    return true;
}

function shouldSaveSliders() {
    let records = JSON.parse(localStorage.getItem('records')) || [];

    // Если records пустой, то возвращаем true
    if (records.length === 0) {
        return true;
    }

    // Получаем значение последнего сохранения lastSaveTime из localStorage
    const lastSaveTime = parseInt(localStorage.getItem('lastSaveTime')) || 0;
    // Получаем текущий timestamp в секундах
    const timestamp = Math.floor(Date.now() / 1000);

    // Если прошло меньше 12-ти часов с lastSaveTime, то False, иначе продолжаем дальше.
    if (timestamp - lastSaveTime < 12 * 3600) {
        return false;
    }

    return true;
}

function getSlidersValues() {
    // Получаем существующие записи из localStorage
    let records = JSON.parse(localStorage.getItem('records')) || [];

    // Если records пустой, то возвращаем {}
    if (records.length === 0) {
        return {};
    }

    // Получаем запись с самым большим timestamp и записывает ключ data в lastData
    const lastData = records.reduce((prev, current) => {
        return (prev.timestamp > current.timestamp)? prev : current;
    }, records[0]);

    // Возвращаем lastData.data, это словарь со значениями ползунков
    return lastData.data;
}

document.addEventListener('DOMContentLoaded', function () {
    // Установить значения слайдеров
    const slidersValues = getSlidersValues(); // Получаем значения
    const sliders = document.querySelectorAll('input[type="range"]'); // Все слайдеры

    sliders.forEach(slider => {
        const sliderName = slider.name; // Например, "anxiety", "sociality"
        if (sliderName in slidersValues) {
            slider.value = slidersValues[sliderName]; // Устанавливаем значение из словаря
            const valueItem = document.getElementById(`${sliderName}-value`);
            valueItem.textContent = slider.value; // Отображаем значение в панели инструментов
        }
    });
});


// Функция для форматирования timestamp в hh:mm dd.mm.yyyy
function formatTimestamp(timestamp) {
    const date = new Date(timestamp);
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Месяцы начинаются с 0
    const year = date.getFullYear();
    return `${hours}:${minutes} ${day}.${month}.${year}`;
}


document.addEventListener('DOMContentLoaded', function() {
    // Получаем элементы ползунков и отображаемые значения
    const anxietySlider = document.getElementById('anxiety-slider');
    const anxietyValue = document.getElementById('anxiety-value');
    const socialitySlider = document.getElementById('sociality-slider');
    const socialityValue = document.getElementById('sociality-value');
    const moodSlider = document.getElementById('mood-slider');
    const moodValue = document.getElementById('mood-value');
    const impulsivitySlider = document.getElementById('impulsivity-slider');
    const impulsivityValue = document.getElementById('impulsivity-value');
    const energySlider = document.getElementById('energy-slider');
    const energyValue = document.getElementById('energy-value');

    // Обновляем отображаемые значения при перемещении ползунков
    if (anxietySlider) {
        anxietySlider.addEventListener('input', function() {
            anxietyValue.textContent = anxietySlider.value;
        });
    }

    if (socialitySlider) {
        socialitySlider.addEventListener('input', function() {
            socialityValue.textContent = socialitySlider.value;
        });
    }

    if (moodSlider) {
        moodSlider.addEventListener('input', function() {
            moodValue.textContent = moodSlider.value;
        });
    }

    if (impulsivitySlider) {
        impulsivitySlider.addEventListener('input', function() {
            impulsivityValue.textContent = impulsivitySlider.value;
        });
    }

    if (energySlider) {
        energySlider.addEventListener('input', function() {
            energyValue.textContent = energySlider.value;
        });
    }

    // Обработчик для кнопки "Сохранить"
    const saveButton = document.getElementById('save-button');
    if (canSaveSliders()) {
        saveButton.disabled = false;
        if (shouldSaveSliders()) {
            setFaded('save-button');
        }
    }

    if (saveButton) {
        saveButton.addEventListener('click', function() {
            // Получаем текущий timestamp в секундах
            const timestamp = Math.floor(Date.now() / 1000);

            // Собираем значения ползунков
            const data = {
                anxiety: parseInt(anxietySlider.value),
                sociality: parseInt(socialitySlider.value),
                mood: parseInt(moodSlider.value),
                impulsivity: parseInt(impulsivitySlider.value),
                energy: parseInt(energySlider.value)
            };

            // Получаем существующие записи из localStorage
            let records = JSON.parse(localStorage.getItem('records')) || [];

            // Добавляем новую запись
            records.push({
                time: timestamp,
                data: data
            });

            // Сохраняем обратно в localStorage
            localStorage.setItem('records', JSON.stringify(records));
            localStorage.setItem('lastSaveTime', timestamp);
            saveButton.disabled = true;

            location.reload();
        });
    }

    // Добавляем функцию для отображения модального окна
    function showModal(title, description) {
        modalTitle.textContent = title;
        modalDescription.innerHTML = description;
        modal.classList.remove('hidden');
    }

    // Функция для отображения модального окна с загрузкой
    function showLoadingModal() {
        modalTitle.textContent = 'Пожалуйста, подождите...';
        modalDescription.innerHTML = `
            <div class="loading-spinner"></div>
            <p>Получение ответа...</p>
        `;
        modal.classList.remove('hidden');
    }

    function showChoiceModal() {
        modalTitle.textContent = 'Выберите действие';
        modalDescription.innerHTML = `
            <p>У вас уже есть сохраненный ответ. Что вы хотите сделать?</p>
            <div class="choice-buttons">
                <button id="loadPrevious" class="choice-button">Загрузить</button>
                <button id="getNew" class="choice-button">Новый</button>
            </div>
        `;
        modal.classList.remove('hidden');

        // Обработчик для загрузки предыдущего ответа
        document.getElementById('loadPrevious').addEventListener('click', function() {
            modal.classList.add('hidden'); // Закрываем окно выбора
            const responseText = localStorage.getItem('aiResponse');
            showModal('Ответ', responseText);
        });

        // Обработчик для получения нового ответа
        document.getElementById('getNew').addEventListener('click', function() {
            modal.classList.add('hidden'); // Закрываем окно выбора
            makeFetchRequest(); // Делаем новый запрос
        });
    }

    // Обновляем функцию makeFetchRequest
    function makeFetchRequest() {
        // Показать модальное окно с загрузкой
        showLoadingModal();

        // Получаем информацию о всех негативных событиях.
        penalties = JSON.parse(localStorage.getItem('penaltyList')) || [];
        // Получаем записи оценки.
        records = JSON.parse(localStorage.getItem('records')) || [];

        // Преобразуем список в текстовый формат
        const text_1 = "\nОтмеченные отрицательные действия (последние 30):\n" + penalties.slice(-30).map(item => {
            return `${formatTimestamp(item.timestamp)}: ${item.name}`;
        }).join('\n') + "\n";

        // Текущее дата и время в текстовом формате
        const text_2 = `Текущее время (hh:mm dd.mm.yyyy): ${formatTimestamp(Math.floor(Date.now()))}\n`;

        // Получаем текущее время с последнего срыва.
        const text_3 = `Прошло времени с последнего полного срыва (дни:часы:минуты:секунды): ${formatTime(calculateElapsedTime())}\n`;

        const text_4 = "\nЕжедневные оценки пяти параметров (последние 30 дней, могут быть пропуски. Оценки: 1 - низкое, 2 - ниже среднего, 3 - средне, 4 - выше среднего, 5 - высокое. Сокращения: настроение - m, энергия - e, социальность - s, тревожность - a, зов срыва - i):\n" + records.slice(-30).map(item => {
            return `Дата: ${formatTimestamp(item.time * 1000)} Оценки: m - ${item.data.mood}, e - ${item.data.energy}, s - ${item.data.sociality}, a - ${item.data.anxiety}, i - ${item.data.impulsivity}`;
        }).join('\n') + "\n";

        const queryText = text_2 + text_3 + text_1 + text_4;

        const url = "https://myapihelper.na4u.ru/quit_app/ai_quit.php";
        const data = {
            password: getPassword(),
            text: queryText
        };

        fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            return response.json();
        })
        .then(result => {
            if (result.choices) {
                // Извлекаем текст ответа и отображаем его в модальном окне
                const responseText = result.choices[0].message.content;
                // Сохраняем ответ в localStorage
                localStorage.setItem('aiResponse', responseText);
                showModal("Ответ", responseText);
            } else if (result.error) {
                // Отображаем модальное окно с текстом ошибки
                showModal("Ошибка", result.error);
            } else {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
        })
        .catch(error => {
            console.error("Error:", error);
            // Отображаем модальное окно с текстом ошибки
            showModal("Ошибка", error);
        });
    }

    // Обработчик для кнопки "AI"
    const aiAdviceButton = document.getElementById('ai-advice-button');
    aiAdviceButton.addEventListener('click', function() {
        if (localStorage.getItem('aiResponse')) {
            // Если есть сохраненный ответ, предлагаем выбор
            showChoiceModal();
        } else {
            // Иначе делаем новый запрос
            makeFetchRequest();
        }
    });

});


function setFaded(element_id) {
    const el = document.getElementById(element_id);
    el.classList.add('faded');
}

function unsetFaded(element_id) {
    const el = document.getElementById(element_id);
    el.classList.remove('faded');
}
